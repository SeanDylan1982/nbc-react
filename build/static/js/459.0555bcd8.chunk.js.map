{"version":3,"file":"static/js/459.0555bcd8.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/style-to-object/index.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/index.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","parse","require","StyleToObject","iterator","output","hasIterator","len","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","apply","_objectSpread2","forEach","getOwnPropertyDescriptors","defineProperties","stringifyPosition","point","index","VFileMessage","_Error","_inherits","_super","_createSuper","place","origin","_this","_classCallCheck","parts","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","_createClass","_wrapNativeSuper","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","_toConsumableArray","includes","get","set","assertNonEmpty","assertPart","stem","encoding","part","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","concat","wrap","use","middelware","unified","base","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","_attachers$freezeInde","_toArray","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","_value","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","previous","contentStart","attempt","parser","contentInitial","lineStart","token","contentType","document","childFlow","childToken","lineStartOffset","self","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","partial","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","combined","_combined$key","_combined$key2","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","anyFactory","propsFactory","tests","checks","_checks$index","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","footnoteReference","counter","id","safeId","footnoteOrder","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","_objectSpread","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","_tail$children","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","pow","types","DefinedInfo","_Info","mask","mark","_assertThisInitialized","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","_parent$children","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","_unused","v","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkParse","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes"],"sourceRoot":""}